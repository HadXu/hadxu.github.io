<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rust on lay&#39;s 博客</title>
    <link>https://hadxu.github.io/categories/rust/</link>
    <description>Recent content in rust on lay&#39;s 博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 30 Jan 2021 09:00:00 +0800</lastBuildDate><atom:link href="https://hadxu.github.io/categories/rust/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Trait in Rust</title>
      <link>https://hadxu.github.io/post/2021-01-30-the-trait-in-Rust/</link>
      <pubDate>Sat, 30 Jan 2021 09:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2021-01-30-the-trait-in-Rust/</guid>
      <description>Trait in Rust Rust中的Trait非常优美，类似于泛型编程概念。有时候造轮子的时候发现不同的类型具有相同的方法，如果一个个写方法显得不那么友好，比如 1 2 3 4 5 6 7 8 9 10 11 12 fn double_i32(x: i32)-&amp;gt; i32 {x*2}fn double_i64(x: i64)-&amp;gt; i64 {x*2}fn main(){println!(&amp;#34;double 5_i32 == {}&amp;#34;,double_i32(5_i32));println!(&amp;#34;double 5_i64 == {}&amp;#34;,double_i64(5_i64));} 可以发现非常冗余，那么如何解决这种问题？可以使用Trait，先看Trait的定义 1</description>
    </item>
    
    <item>
      <title>Rust by Example(chapter17)</title>
      <link>https://hadxu.github.io/post/2020-03-22-rust-by-example-chapter17/</link>
      <pubDate>Sun, 22 Mar 2020 09:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2020-03-22-rust-by-example-chapter17/</guid>
      <description>标准库 这一章主要介绍标准库，Rust中提供了各种各样的标准库供我们使用。 String vectors Option Result Box Box Box是一个智能指针，在计算机程序中，所有的值都是在栈中分配的，同时是固定大小的。但是可以使用Box来向堆中分配空间，同时返回一个指针，如果指针不在上下文中，那么分配的区域就会被回收。 1 2 3 4 5 6</description>
    </item>
    
    <item>
      <title>Rust by Example(chapter16)</title>
      <link>https://hadxu.github.io/post/2020-03-21-rust-by-example-chapter16/</link>
      <pubDate>Sat, 21 Mar 2020 09:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2020-03-21-rust-by-example-chapter16/</guid>
      <description>macro_rules! 在Rust中，宏非常之强大，宏就像一个函数一样，但是接着!。However, unlike macros in C and other languages, Rust macros are expanded into abstract syntax trees, rather than string preprocessing, so you don&amp;rsquo;t get unexpected precedence bugs. 1 2 3 4 5 6 7 8 9 10 // 将() 展开为打印字符 macro_rules!say_hello{()=&amp;gt;{println!(&amp;#34;Hello!&amp;#34;);};}fn main(){say_hello!()} Designators 通过一种宏来创建函数 1 2 3 4 5 6 7 8 9 10 11 12 13 14 macro_rules!create_function{($func_name:ident)=&amp;gt;{fn $func_name(){println!(&amp;#34;You called {:?}()&amp;#34;,stringify!($func_name));}};}create_function!(foo);fn main(){foo()} Repeat 可以使用宏来进行递归 1 2 3 4 5 6 7 8 9 10 11</description>
    </item>
    
    <item>
      <title>Rust by Example(chapter15)</title>
      <link>https://hadxu.github.io/post/2020-03-20-rust-by-example-chapter15/</link>
      <pubDate>Fri, 20 Mar 2020 09:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2020-03-20-rust-by-example-chapter15/</guid>
      <description>Derive(派生) 在Rust中，提供了各种各样的派生特性。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 #[derive(PartialOrd, PartialEq)]struct Centimeters(f64);struct Inches(i32);implInches{fn to_centimeters(&amp;amp;self)-&amp;gt; Centimeters{let&amp;amp;Inches(inches)=self;Centimeters(inchesasf64*2.54)}}fn main(){letfoot=Inches(12);letmeter=Centimeters(100.0);letcmp=iffoot.to_centimeters()&amp;lt;meter{&amp;#34;smaller&amp;#34;}else{&amp;#34;bigger&amp;#34;};println!(&amp;#34;{}&amp;#34;,cmp);} 在这里，首先定义了Centimeters，同时重载了比较运算符，在接下来的代码中，可以对该结构体进行比较。 dyn Rust编译器需要知道返回类型的大小，</description>
    </item>
    
    <item>
      <title>Rust by Example(chapter14)</title>
      <link>https://hadxu.github.io/post/2020-03-19-rust-by-example-chapter14/</link>
      <pubDate>Thu, 19 Mar 2020 09:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2020-03-19-rust-by-example-chapter14/</guid>
      <description>Generics(泛型) Generics是Rust中的重要内容，能够最大化地减少代码的重复。fn foo&amp;lt;T&amp;gt;(arg: T) { ... }来定义一个函数，传入的参数为T。 1 2 3 4 5 6 7 8 9 10 11 12 struct Val{val: f64,}implVal{pubfn value(&amp;amp;self)-&amp;gt; &amp;amp;f64 {&amp;amp;self.val}}fn main(){letx=Val{val: 3.};lety=x.value();} trait(接口) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 //定义接口 traitHasArea{fn area(&amp;amp;self)-&amp;gt; f64;}struct Rectangle{length: f64,height: f64 }// 实现接口 implHasAreaforRectangle{fn area(&amp;amp;self)-&amp;gt; f64</description>
    </item>
    
    <item>
      <title>Rust by Example(chapter9-13)</title>
      <link>https://hadxu.github.io/post/2020-03-18-rust-by-example-chapter9-13/</link>
      <pubDate>Wed, 18 Mar 2020 09:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2020-03-18-rust-by-example-chapter9-13/</guid>
      <description>模块 &amp;amp; crate &amp;amp; Cargo &amp;amp; Attributes 可见性 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 mod my_mod{// 不可见 fn private_function(){println!(&amp;#34;called `my_mod::private_function()`&amp;#34;);}// 可见 pubfn function(){println!(&amp;#34;called `my_mod::function()`&amp;#34;);}// 可以嵌套 pubmod nested{pubfn function(){println!(&amp;#34;called `my_mod::nested::function()`&amp;#34;);}}}mod my{// struct默认是私有的 pubstruct OpenBox&amp;lt;T&amp;gt;{pubcontents: T,}#[allow(dead_code)]pubstruct ClosedBox&amp;lt;T&amp;gt;{contents: T,}impl&amp;lt;T&amp;gt;ClosedBox&amp;lt;T&amp;gt;{pubfn new(contents: T)-&amp;gt; ClosedBox&amp;lt;T&amp;gt;{ClosedBox{contents: contents,}}}} 包可见性 Crates 在Rust中，crates是一个compilation unit，默认是编译成可执行文件，如</description>
    </item>
    
    <item>
      <title>Rust by Example(chapter8)</title>
      <link>https://hadxu.github.io/post/2020-03-17-rust-by-example-chapter8/</link>
      <pubDate>Tue, 17 Mar 2020 09:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2020-03-17-rust-by-example-chapter8/</guid>
      <description>函数 函数定义 1 2 3 fn fun(v:i32)-&amp;gt; i32{v+3} 定义类型以及返回类型，同时在Rust函数是一个表达式，也就是不需要return。 方法 1 2 3 4 5 6 7 struct Pair(Box&amp;lt;i32&amp;gt;,Box&amp;lt;i32&amp;gt;);implPair{fn destory(self){letPair(x,y)=self;println!(&amp;#34;Destroying Pair({}, {})&amp;#34;,x,y);}} 闭包(也称之为lambda表达式) 1 2 3 fn function(i: i32)-&amp;gt; i32 {i+1}letclosure_annotated=|i: i32|-&amp;gt; i32 {i+1};letone=||1; 下面看一下指针借用 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 fn main(){lethaystack=vec![1,2,3];letcontains=move|needle|haystack.contains(needle);println!(&amp;#34;{}&amp;#34;,contains(&amp;amp;1));println!(&amp;#34;{}&amp;#34;,contains(&amp;amp;4));println!(&amp;#34;There&amp;#39;re {} elements in vec&amp;#34;,haystack.len());// ^ Uncommenting above line will result in compile-time error // because borrow checker doesn&amp;#39;t</description>
    </item>
    
    <item>
      <title>Rust by Example(chapter7)</title>
      <link>https://hadxu.github.io/post/2020-03-16-rust-by-example-chapter7/</link>
      <pubDate>Mon, 16 Mar 2020 10:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2020-03-16-rust-by-example-chapter7/</guid>
      <description>Rust是一个现代的系统级编程语言，侧重于安全、速度和并发。 条件控制 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 fn main(){letn=5;ifn&amp;lt;0{print!(&amp;#34;{} is negative&amp;#34;,n);}elseifn&amp;gt;0{print!(&amp;#34;{} is positive&amp;#34;,n);}else{print!(&amp;#34;{} is zero&amp;#34;,n);}letbig_n=ifn&amp;lt;10&amp;amp;&amp;amp;n&amp;gt;-10{println!(&amp;#34;, and is a small number, increase ten-fold&amp;#34;);10*n}else{println!(&amp;#34;, and is a big number, halve the number&amp;#34;);n/2};println!(&amp;#34;{} -&amp;gt; {}&amp;#34;,n,big_n);} loop循环 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 fn main(){letmutcount=0u32;println!(&amp;#34;Let&amp;#39;s count until infinity!&amp;#34;);loop{count+=1;ifcount==3{println!(&amp;#34;three&amp;#34;);continue;}println!(&amp;#34;{}&amp;#34;,count);ifcount==5{println!(&amp;#34;OK, that&amp;#39;s enough&amp;#34;);break;}}}fn main(){letmutcounter=0;letresult=loop{counter+=1;ifcounter==10{breakcounter*2;}};assert_eq!(result,20);} for 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15</description>
    </item>
    
    <item>
      <title>Rust by Example(chapter6)</title>
      <link>https://hadxu.github.io/post/2020-03-15-rust-by-example-chapter6/</link>
      <pubDate>Sun, 15 Mar 2020 09:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2020-03-15-rust-by-example-chapter6/</guid>
      <description>Conversion Rust的核心就是traits，可以重载。 From and To 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 usestd::convert::From;#[derive(Debug)]struct Number{value: i32,}implFrom&amp;lt;i32&amp;gt;forNumber{fn from(item: i32)-&amp;gt; Self{Number{value: item}}}fn main(){letnum=Number::from(123);println!(&amp;#34;{:#?}&amp;#34;,num);letx=5;letnum: Number=x.into();println!(&amp;#34;{:#?}&amp;#34;,num);} 实现了From这个traits,就能够同时使用from以及into，用来从类型之间的转换。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 usestd::fmt;struct Circle{radius: i32 }implfmt::DisplayforCircle{fn fmt(&amp;amp;self,f: &amp;amp;mutfmt::Formatter)-&amp;gt; fmt::Result{write!(f,&amp;#34;Circle of radius {}&amp;#34;,self.radius)}}fn main(){letcircle=Circle{radius: 6};println!(&amp;#34;{}&amp;#34;,circle.to_string());} 从String转变 1 2 3</description>
    </item>
    
    <item>
      <title>Rust by Example(chapter4-5)</title>
      <link>https://hadxu.github.io/post/2020-03-13-rust-by-example-chapter4-5/</link>
      <pubDate>Fri, 13 Mar 2020 09:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2020-03-13-rust-by-example-chapter4-5/</guid>
      <description>变量绑定 简单的例子 1 2 3 4 //如果不使用会有警告 letnoisy_unused_variable=2u32;//前面添加了下划线就不会有警告 let_noisy_unused_variable=2u32; Mutability 如果申请一个变量可以变化的话，那么就需要 1 letmutmutable_binding=1; 变量作用域与变量名掩盖(Scope and Shadowing) 1 2 3 4 5 6 7 8 fn main(){leta=3;{leta=4;println!(&amp;#34;{}&amp;#34;,a);}println!(&amp;#34;{}&amp;#34;,a);} cast(强制转换) 1 2 3 4 5 6 7</description>
    </item>
    
    <item>
      <title>Rust by Example(chapter3)</title>
      <link>https://hadxu.github.io/post/2020-03-12-rust-by-example-chapter3/</link>
      <pubDate>Thu, 12 Mar 2020 10:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2020-03-12-rust-by-example-chapter3/</guid>
      <description>Custom Types Rust中有两种自定义类型 struct enum struct 在结构体中，有三种struct的类型，分别为 元祖数据结构 类C struct unit struts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 #[derive(Debug)]struct Person&amp;lt;&amp;#39;a&amp;gt;{// &amp;#39;a 表示生命周期,当Person生命结束了，那么name也结束了。 name: &amp;amp;&amp;#39;a str,age: u8,}struct Nil;struct Pair(i32,f32);struct Point{x: f32,y: f32,}// 取消禁用代</description>
    </item>
    
    <item>
      <title>Rust by Example(chapter1)</title>
      <link>https://hadxu.github.io/post/2020-03-10-rust-by-example-chapter1/</link>
      <pubDate>Wed, 11 Mar 2020 09:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2020-03-10-rust-by-example-chapter1/</guid>
      <description>Rust是一个现代的系统级编程语言，侧重于安全、速度和并发。 安装 1 curl--proto&amp;#39;=https&amp;#39;--tlsv1.2-sSfhttps://sh.rustup.rs | sh hello world 1 2 3 fn main(){println!(&amp;#34;Hello World!&amp;#34;);} 其中，println!是一个宏，功能是将字符串打印到终端。 编译方式如下 1 2 rustc hello.rs ./hello 或者使用 1 cargo run cargo是一个rust生态管理工具，我们在接下来的各种实例中都采用这种方式来运行我们的程序。 注释</description>
    </item>
    
    <item>
      <title>Rust by Example(chapter2)</title>
      <link>https://hadxu.github.io/post/2020-03-11-rust-by-example-chapter2/</link>
      <pubDate>Wed, 11 Mar 2020 09:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2020-03-11-rust-by-example-chapter2/</guid>
      <description>Primitives(基本数据类型) Rust提供了几种数据类型 整数类型: i8, i16, i32, i64, i128 和isize(指针) 无符号整数类型: u8, u16, u32, u64, u128 和usize(指针) 浮点: f32, f64 char类型(4个比特) bool类型 元祖类型() 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 fn main(){// Variables can be type annotated. letlogical: bool =true;leta_float: f64 =1.0;//</description>
    </item>
    
  </channel>
</rss>
