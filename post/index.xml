<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on lay&#39;s 博客</title>
    <link>https://hadxu.github.io/post/</link>
    <description>Recent content in Posts on lay&#39;s 博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 21 Nov 2021 11:00:00 +0800</lastBuildDate><atom:link href="https://hadxu.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CASPP 第二章课后习题解答</title>
      <link>https://hadxu.github.io/post/2021-11-21-solution-of-CASPP-chapter2/</link>
      <pubDate>Sun, 21 Nov 2021 11:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2021-11-21-solution-of-CASPP-chapter2/</guid>
      <description>CASPP 第二章课后习题解答 2021年11月更新 发现之前的docker已经不能使用了，同时使用了ubuntu20.04镜像的话会出现问题，于是修改了镜像的操作 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 FROM ubuntu:20.04 ARG DEBIAN_FRONTEND=noninteractive RUN sed -i &amp;#39;/security/d&amp;#39; /etc/apt/sources.list RUN sed -i s@/archive.ubuntu.com/@/mirrors.tencent.com/@g /etc/apt/sources.list RUN apt-get clean &amp;amp;&amp;amp; apt-get update --fix-missing &amp;amp;&amp;amp; apt-get upgrade \ &amp;amp;&amp;amp; apt-get install -y build-essential curl wget vim net-tools bzip2 git openssh-server RUN apt-get install -y gdb-multiarch qemu-system-misc</description>
    </item>
    
    <item>
      <title>近况</title>
      <link>https://hadxu.github.io/post/2021-11-06.recent/</link>
      <pubDate>Sat, 06 Nov 2021 09:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2021-11-06.recent/</guid>
      <description>近况 又是好久没有写随笔了，从9月份开始到现在都没有发生太大的事情，每天在上班下班，这就是我们打工人的生活吗？心中仍有很多东西想做但是一直没有做，没有时间？借口，没有金钱？也是借口。那么为什么一直没有踏出自己的一步呢？我想应该是疫情以及成本的问题吧。从10月份开始一直在搞全国抗体亲</description>
    </item>
    
    <item>
      <title>911恐怖袭击</title>
      <link>https://hadxu.github.io/post/2021-09-12.911/</link>
      <pubDate>Sun, 12 Sep 2021 09:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2021-09-12.911/</guid>
      <description>911恐怖袭击 20年前的今天，也就是2001年9月11日(美国时间)发生了911事变，也就是恐怖袭击。这次袭击让美国从狂妄中醒过来，让美国从所谓的民主中醒过来。今天在奈飞上看到了惊世的转折点 花了两天的时间将这个纪录片刷完，非常过瘾。从头解释了911袭击的过去以及将来。 美苏冷战 苏联</description>
    </item>
    
    <item>
      <title>No safe place</title>
      <link>https://hadxu.github.io/post/2021-07-22.henan/</link>
      <pubDate>Thu, 22 Jul 2021 09:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2021-07-22.henan/</guid>
      <description>No safe place 最新的一期经济学人的封面是 讲述了北极遇到了前所未有的高温，其中俄罗斯北部竟然出现了40°的高温，北极竟然出现了生意盎然的情况，这如果是在沙漠来说是一件好事，而对于北极来说是一件非常恐怖的事情，意味着北极的冰山正在融化，北极熊遇到了前所未有的苦难，可能面临灭绝。同时河南发生暴</description>
    </item>
    
    <item>
      <title>一种迷你解释器</title>
      <link>https://hadxu.github.io/post/2021-06-21.A-tiny-Interpreter-written-by-Rust/</link>
      <pubDate>Mon, 21 Jun 2021 09:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2021-06-21.A-tiny-Interpreter-written-by-Rust/</guid>
      <description>编写一个解释器(Github) 程序语言是给人读写的语言，如何将程序语言变成可执行的代码需要经过翻译。目前计算机语言分为两种派别1、解释器；2、编译器。其中解释器是边解释边执行，不需要将全部的代码一次性执行，经典的解释型语言有Python、Ruby，Perl， Matlab等等。而编</description>
    </item>
    
    <item>
      <title>一种迷你操作系统</title>
      <link>https://hadxu.github.io/post/2021-06-03.build-tiny-OS/</link>
      <pubDate>Thu, 03 Jun 2021 09:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2021-06-03.build-tiny-OS/</guid>
      <description>编写自己的一个操作系统(Github) 代码统计为 其中Rust代码量为2125行，好像也不是很多 编写自己的一个操作系统是非常有趣，从底层到顶层的一步一步地搭建，这个过程痛苦但是非常有意思，整个操作系统的搭建离不开两个字抽象，都知道计算机内部的表示都是01，单独的01是没有意义的，但</description>
    </item>
    
    <item>
      <title>Yuan long ping</title>
      <link>https://hadxu.github.io/post/2021-05-29.yuan-long-ping/</link>
      <pubDate>Sat, 29 May 2021 09:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2021-05-29.yuan-long-ping/</guid>
      <description>Yuan long ping(袁隆平) 上周也就是 2021年5月22日下午，一代杂交水稻🌾之父-袁隆平去世，享年91岁。袁隆平一直存在我们孩童时代，从各个课本以及新闻都能够看到袁隆平的影子。自从我懂事以来我没有吃过杂交稻，但是我们的父母爷爷辈对杂交稻非常熟悉，因为杂交稻在和平年代不好吃，但是在饥荒</description>
    </item>
    
    <item>
      <title>Trait in Rust</title>
      <link>https://hadxu.github.io/post/2021-01-30-the-trait-in-Rust/</link>
      <pubDate>Sat, 30 Jan 2021 09:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2021-01-30-the-trait-in-Rust/</guid>
      <description>Trait in Rust Rust中的Trait非常优美，类似于泛型编程概念。有时候造轮子的时候发现不同的类型具有相同的方法，如果一个个写方法显得不那么友好，比如 1 2 3 4 5 6 7 8 9 10 11 12 fn double_i32(x: i32)-&amp;gt; i32 {x*2}fn double_i64(x: i64)-&amp;gt; i64 {x*2}fn main(){println!(&amp;#34;double 5_i32 == {}&amp;#34;,double_i32(5_i32));println!(&amp;#34;double 5_i64 == {}&amp;#34;,double_i64(5_i64));} 可以发现非常冗余，那么如何解决这种问题？可以使用Trait，先看Trait的定义 1</description>
    </item>
    
    <item>
      <title>Year of 2020</title>
      <link>https://hadxu.github.io/post/2020-12-29-year-of-2020/</link>
      <pubDate>Tue, 29 Dec 2020 09:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2020-12-29-year-of-2020/</guid>
      <description>Year of 2020 2020年即将过去，如pony所说，2020年真是一个奇幻的一年，突然的疫情改变了每个人的生活方式，下面就是微博《三维地图看世界》所制作的视频，看完真是一言难尽。</description>
    </item>
    
    <item>
      <title>Attention is All your need</title>
      <link>https://hadxu.github.io/post/2020-12-15-Attention-is-all-your-need/</link>
      <pubDate>Tue, 15 Dec 2020 09:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2020-12-15-Attention-is-all-your-need/</guid>
      <description>Attention is All your need Attention的花式玩法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 class Residual(nn.Module): def __init__(self, fn): super().__init__() self.fn = fn def forward(self, x, **kwargs): return self.fn(x, **kwargs) + x class PreNorm(nn.Module): def __init__(self, dim, fn): super().__init__() self.norm = nn.LayerNorm(dim) self.fn = fn def forward(self, x, **kwargs): return self.fn(self.norm(x), **kwargs) class FeedForward(nn.Module): def __init__(self, dim, hidden_dim, dropout=0.): super().__init__() self.net =</description>
    </item>
    
    <item>
      <title>US Election</title>
      <link>https://hadxu.github.io/post/2020-11-08-biden-win/</link>
      <pubDate>Mon, 09 Nov 2020 09:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2020-11-08-biden-win/</guid>
      <description>Biden win 几个月没有写随笔，世界真的是很魔幻呀，从特朗普的对华政策，到美国新冠的肆虐，特朗普政府并没有反思如何让本国人民过的更好，先来看看美国的新冠疫情 马上就是进入千万的级别，这是多么恐怖的数据，而特朗普政府却让选民亲自去现场投票，而拜登政府让选民可以使用邮递选票，这是一个大的进步，试</description>
    </item>
    
    <item>
      <title>Locked out</title>
      <link>https://hadxu.github.io/post/2020-08-02-Locked-out/</link>
      <pubDate>Sun, 02 Aug 2020 09:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2020-08-02-Locked-out/</guid>
      <description>Locked out When and how to let migrants move again 今年上半年来，我们讨论最多的就是疫情，而现在的疫情已经看起来不可控，尤其是美国和印度。</description>
    </item>
    
    <item>
      <title>diskcache</title>
      <link>https://hadxu.github.io/post/2020-07-29-diskcache/</link>
      <pubDate>Wed, 29 Jul 2020 11:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2020-07-29-diskcache/</guid>
      <description>数据科学神器-Diskcache 在实际工作中或者打比赛中，我们常见的一个巨大问题就是数据读取加载的问题，比如数据集大，多，处理耗时等问题，今天这篇文章就用diskcache来解决数据读取方面的问题。（手把手教） 产生大量的数据 一时找不到大量的数据的我，只能先产生大量的数据了。 1 2 3</description>
    </item>
    
    <item>
      <title>投资</title>
      <link>https://hadxu.github.io/post/2020-07-23-investment/</link>
      <pubDate>Thu, 23 Jul 2020 11:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2020-07-23-investment/</guid>
      <description>投资 2020年是鼠年，在3月份的时候经历了4次美股熔断之后，感觉没有什么大的动荡能够吓到我们（害），但是当自己亲身经历那种股市或者基金的时候，自己却无所适从。 基金与黄金 在基金方面，最坚挺的还是白酒，白酒在3月份与大盘一样低谷，那个时候我买了几千块钱，但是那个时候上证大盘还没有到达</description>
    </item>
    
    <item>
      <title>毕业</title>
      <link>https://hadxu.github.io/post/2020-06-13-graduation-over/</link>
      <pubDate>Sat, 13 Jun 2020 11:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2020-06-13-graduation-over/</guid>
      <description>毕业 今天是2020年6月13日，作为研究生的我，本来是不太很伤感的，但是看到身边的人一个一个地离开校园，不知道是不是最后一次见面，莫名感觉鼻子有点酸酸的。回想我读大学8年，每次毕业都有不同的感觉，同时走了很多歪路，以此文章记录我8年来的路以及感想。 我的路分为3个部分 专科 2012.9-2015.6 本科 2015.9-2017.6 研</description>
    </item>
    
    <item>
      <title>Union find</title>
      <link>https://hadxu.github.io/post/2020-05-12-union-find/</link>
      <pubDate>Tue, 12 May 2020 11:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2020-05-12-union-find/</guid>
      <description>并查集 框架如下 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class UF: def __init__(self, N): self.N = N self._id = [i for i in range(N)] def find(self, p): while p != self._id[p]: p = self._id[p] return p def union(self, p, q): p = self.find(p) q = self.find(q) if p==q: return self._id[p] = q</description>
    </item>
    
    <item>
      <title>The new scold war</title>
      <link>https://hadxu.github.io/post/2020-05-10-The-new-scold-warthe-Economist/</link>
      <pubDate>Sun, 10 May 2020 09:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2020-05-10-The-new-scold-warthe-Economist/</guid>
      <description>Open schools first   The new scold war  </description>
    </item>
    
    <item>
      <title>MD5 algorithm</title>
      <link>https://hadxu.github.io/post/2020-05-03-md5-algorithm/</link>
      <pubDate>Sun, 03 May 2020 09:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2020-05-03-md5-algorithm/</guid>
      <description>MD5 Algorithm 一个最小的MD5算法(md5.c) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 #include &amp;lt;stdint.h&amp;gt; void md5_compress(uint32_t state[static 4], const uint8_t block[static 64])</description>
    </item>
    
    <item>
      <title>Open schools first</title>
      <link>https://hadxu.github.io/post/2020-05-02-Open-schools-firstthe-Economist/</link>
      <pubDate>Sat, 02 May 2020 09:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2020-05-02-Open-schools-firstthe-Economist/</guid>
      <description>Open schools first   Open schools first
  </description>
    </item>
    
    <item>
      <title>Dynamic Programming</title>
      <link>https://hadxu.github.io/post/2020-05-01-dynamic-programming/</link>
      <pubDate>Fri, 01 May 2020 11:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2020-05-01-dynamic-programming/</guid>
      <description>Dynamic Programming 1. 最长上升子序列 1 2 3 4 5 6 7 8 9 10 11 12 class Solution: def lengthOfLIS(self, nums: List[int]) -&amp;gt; int: if len(nums) == 0: return 0 dp = [1] * len(nums) L = len(nums) for i in range(L): for j in range(i): if nums[i] &amp;gt; nums[j]: dp[i] = max(dp[i], dp[j]+1) return max(dp) 2. 最长公共子序列 1 2 3 4 5 6 7 8 9 10 11 12 13 class Solution: def longestCommonSubsequence(self, text1: str, text2: str) -&amp;gt; int: L1, L2 = len(text1), len(text2) dp = [[0] * (L1+1) for _ in range(L2+1)] for i in range(1, L2+1): for j in range(1, L1+1): if text2[i-1] == text1[j-1]: dp[i][j] = dp[i-1][j-1] + 1 else: dp[i][j] = max(dp[i-1][j], dp[i][j-1]) return dp[-1][-1] 3. 三角形最小路</description>
    </item>
    
    <item>
      <title>命令行的艺术</title>
      <link>https://hadxu.github.io/post/2020-04-30-Bash/</link>
      <pubDate>Thu, 30 Apr 2020 11:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2020-04-30-Bash/</guid>
      <description>命令行的艺术 bg, fg and CTRL+Z ssh-add, ssh-agent ls -i描述符, df -i个数 dig grep -i, -v, -o, -A, -B, -C xargs pgrep, pkill lsof here documents python -m http.server 7777 128限制 ag wc, tee awk, sed, grep httpie ncdu awk sw_vers BASH ${#varname} ${varname:offset:length} ${variable#pattern} ${variable##pattern} ${path##*/} ${variable/#pattern/string} ${file%.png}.jpg ${varname^^} ${varname,,} shell $0 脚本文件名 $1 对应脚本的第一个参数 $# 参数的总数 $@ 全部的参数 read 1 2 3 4 5 6 filename=&amp;#39;/etc/hosts&amp;#39; while read myline do echo &amp;#34;$myline&amp;#34; done &amp;lt; $filename IFS 1 2 3 4 5 input=&amp;#34;/path/to/txt/file&amp;#34; while IFS= read -r line do echo &amp;#34;$line&amp;#34; done &amp;lt; &amp;#34;$input&amp;#34; 上面的命令可以逐</description>
    </item>
    
    <item>
      <title>再次思考深度学习框架的自动求导</title>
      <link>https://hadxu.github.io/post/2020-04-25-re-thinking-deep-learning-framework/</link>
      <pubDate>Sat, 25 Apr 2020 09:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2020-04-25-re-thinking-deep-learning-framework/</guid>
      <description>再次思考深度学习框架的自动求导 刚开始读研的时候，对Pytorch以及Tensorflow的反向求导机制非常感兴趣，于是寻找了大量的资料去了解反向求导的机制。2017年华盛顿大学有一门课程非常棒dlsys,第一个实验关于自动求导，第二个实验关于将自动求导的矩阵计算使用GPU来操作。</description>
    </item>
    
    <item>
      <title>After the disease, the debt</title>
      <link>https://hadxu.github.io/post/2020-04-24-After-the-disease-the-debtthe-Economist/</link>
      <pubDate>Fri, 24 Apr 2020 09:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2020-04-24-After-the-disease-the-debtthe-Economist/</guid>
      <description>After the disease, the debt 目前的政治家对新冠以后的世界还没有做好准备。</description>
    </item>
    
    <item>
      <title>Is China winning?</title>
      <link>https://hadxu.github.io/post/2020-04-18-Is-China-winningthe-Economist/</link>
      <pubDate>Sat, 18 Apr 2020 09:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2020-04-18-Is-China-winningthe-Economist/</guid>
      <description>Is China winning?   </description>
    </item>
    
    <item>
      <title>The coronavirus crisis will change the world of commerce</title>
      <link>https://hadxu.github.io/post/2020-04-11-The-coronavirus-crisis-will-change-the-world-of-commercethe-Economist/</link>
      <pubDate>Sat, 11 Apr 2020 09:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2020-04-11-The-coronavirus-crisis-will-change-the-world-of-commercethe-Economist/</guid>
      <description>The coronavirus crisis will change the world of commerce   </description>
    </item>
    
    <item>
      <title>Pytorch Distributed Training</title>
      <link>https://hadxu.github.io/post/2020-04-10-Pytorch-distributed-training/</link>
      <pubDate>Fri, 10 Apr 2020 11:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2020-04-10-Pytorch-distributed-training/</guid>
      <description>Pytorch Distributed Training Distributed data parallel training in Pytorch
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120  import os from datetime import datetime import argparse import torch.multiprocessing as mp import torchvision import torchvision.</description>
    </item>
    
    <item>
      <title>CASPP 第三章课后习题解答</title>
      <link>https://hadxu.github.io/post/2020-04-08-solution-of-CASPP-chapter3/</link>
      <pubDate>Tue, 07 Apr 2020 11:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2020-04-08-solution-of-CASPP-chapter3/</guid>
      <description>CASPP 第三章课后习题解答 3.58 一个函数的原型为 1 long decode2(long x, long y, long z); GCC产生的汇编代码为 1 2 3 4 5 6 7 decode2: subq %rdx, %rsi imulq %rsi, %rdi movq %rsi, %rax salq $63, %rax sarq $63, %rax xorq %rdi, %rax 参数x、y、z通过寄存器%rdi、%rsi和%rdx传递。代码将返回值存放在寄存器%rax中。写出等价于上述汇编代码的C代码。 1 2 3 4 5 6 7 8 int decode(int x, int y,</description>
    </item>
    
    <item>
      <title>Covid-19 presents stark choices between life, death and the economy</title>
      <link>https://hadxu.github.io/post/2020-04-04-Covid-19-presents-stark-choices-between-life-death-and-the-economythe-Economist/</link>
      <pubDate>Sat, 04 Apr 2020 15:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2020-04-04-Covid-19-presents-stark-choices-between-life-death-and-the-economythe-Economist/</guid>
      <description>Covid-19 presents stark choices between life, death and the economy  </description>
    </item>
    
    <item>
      <title>2020年的清明</title>
      <link>https://hadxu.github.io/post/2020-04-04-2020-qingming/</link>
      <pubDate>Sat, 04 Apr 2020 09:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2020-04-04-2020-qingming/</guid>
      <description>清明 今天是2020年4月4日，中国的清明节。今年的清明节尤其特殊，从年前1月份开始，陆续的有人感染新型冠状病毒，能够使得肺部逐渐纤维化，不能呼吸，但是意识还是清醒的，因此病人如果得不到及时的救治，就会非常痛苦地死亡。目前为止，全球已经超过109万人感染，超过5.8万人去世。 目前最</description>
    </item>
    
    <item>
      <title>2020年的武汉新年</title>
      <link>https://hadxu.github.io/post/2020-04-03-2020-wuhan/</link>
      <pubDate>Fri, 03 Apr 2020 09:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2020-04-03-2020-wuhan/</guid>
      <description>手机里的2020武汉新年(来源微博-清影Tsingying) 在这一场无硝烟的战争中，武汉人们付出了太多，我们全国乃至全球都不能忘记这个历史。人类在这次战争中完败，目前全球已经有超过100w人感染。中国上半场，外国下半场。 向在这次疫情中去世的人们致最崇高的敬意!</description>
    </item>
    
    <item>
      <title>The state in the time of covid-19</title>
      <link>https://hadxu.github.io/post/2020-03-28-The-state-in-the-time-of-covid-19the-Economist/</link>
      <pubDate>Sat, 28 Mar 2020 09:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2020-03-28-The-state-in-the-time-of-covid-19the-Economist/</guid>
      <description>The state in the time of covid-19   </description>
    </item>
    
    <item>
      <title>linux shell脚本监控进程崩溃自动重启</title>
      <link>https://hadxu.github.io/post/2020-03-25-linux-restart-with-shell/</link>
      <pubDate>Wed, 25 Mar 2020 09:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2020-03-25-linux-restart-with-shell/</guid>
      <description>linux shell脚本监控进程崩溃自动重启 在工作的时候，有时候会碰到程序非常慢，但是又容易崩溃的程序，这时候可以考虑使用一个进程来时刻监督进程执行，如果崩溃就重启。 1 2 3 4 5 6 7 8 9 10 11 # ! /bin/sh while true do procnum=`ps -ef|grep 进程名称|wc -l` if [ $procnum -eq 0 ] then echo &amp;#34;start service....................&amp;#34; ${START_CMD} fi sleep 1 done</description>
    </item>
    
    <item>
      <title>大疆在线直播</title>
      <link>https://hadxu.github.io/post/2020-03-24-live-with-dji/</link>
      <pubDate>Tue, 24 Mar 2020 09:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2020-03-24-live-with-dji/</guid>
      <description>大疆在线直播 2020-04-10更新 突然发现新大陆，可以使用各种平台来直播restream 直接将直播地址以及密码添加进来就ok rtmp://live.restream.io/live/re_2162584xxxxxxx 正文开始 很久之前买了一个大疆无人机，它长这样 这款无人机能够飞行15min，高度500m，长度2km，能够满足我们一般人的需求。 开始玩这个无人机的时候，并</description>
    </item>
    
    <item>
      <title>Rust by Example(chapter17)</title>
      <link>https://hadxu.github.io/post/2020-03-22-rust-by-example-chapter17/</link>
      <pubDate>Sun, 22 Mar 2020 09:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2020-03-22-rust-by-example-chapter17/</guid>
      <description>标准库 这一章主要介绍标准库，Rust中提供了各种各样的标准库供我们使用。 String vectors Option Result Box Box Box是一个智能指针，在计算机程序中，所有的值都是在栈中分配的，同时是固定大小的。但是可以使用Box来向堆中分配空间，同时返回一个指针，如果指针不在上下文中，那么分配的区域就会被回收。 1 2 3 4 5 6</description>
    </item>
    
    <item>
      <title>Paying to stop the pandemic</title>
      <link>https://hadxu.github.io/post/2020-03-21-Paying-to-stop-the-pandemic/</link>
      <pubDate>Sat, 21 Mar 2020 11:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2020-03-21-Paying-to-stop-the-pandemic/</guid>
      <description>Paying to stop the pandemic  </description>
    </item>
    
    <item>
      <title>Rust by Example(chapter16)</title>
      <link>https://hadxu.github.io/post/2020-03-21-rust-by-example-chapter16/</link>
      <pubDate>Sat, 21 Mar 2020 09:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2020-03-21-rust-by-example-chapter16/</guid>
      <description>macro_rules! 在Rust中，宏非常之强大，宏就像一个函数一样，但是接着!。However, unlike macros in C and other languages, Rust macros are expanded into abstract syntax trees, rather than string preprocessing, so you don&amp;rsquo;t get unexpected precedence bugs. 1 2 3 4 5 6 7 8 9 10 // 将() 展开为打印字符 macro_rules!say_hello{()=&amp;gt;{println!(&amp;#34;Hello!&amp;#34;);};}fn main(){say_hello!()} Designators 通过一种宏来创建函数 1 2 3 4 5 6 7 8 9 10 11 12 13 14 macro_rules!create_function{($func_name:ident)=&amp;gt;{fn $func_name(){println!(&amp;#34;You called {:?}()&amp;#34;,stringify!($func_name));}};}create_function!(foo);fn main(){foo()} Repeat 可以使用宏来进行递归 1 2 3 4 5 6 7 8 9 10 11</description>
    </item>
    
    <item>
      <title>Rust by Example(chapter15)</title>
      <link>https://hadxu.github.io/post/2020-03-20-rust-by-example-chapter15/</link>
      <pubDate>Fri, 20 Mar 2020 09:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2020-03-20-rust-by-example-chapter15/</guid>
      <description>Derive(派生) 在Rust中，提供了各种各样的派生特性。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 #[derive(PartialOrd, PartialEq)]struct Centimeters(f64);struct Inches(i32);implInches{fn to_centimeters(&amp;amp;self)-&amp;gt; Centimeters{let&amp;amp;Inches(inches)=self;Centimeters(inchesasf64*2.54)}}fn main(){letfoot=Inches(12);letmeter=Centimeters(100.0);letcmp=iffoot.to_centimeters()&amp;lt;meter{&amp;#34;smaller&amp;#34;}else{&amp;#34;bigger&amp;#34;};println!(&amp;#34;{}&amp;#34;,cmp);} 在这里，首先定义了Centimeters，同时重载了比较运算符，在接下来的代码中，可以对该结构体进行比较。 dyn Rust编译器需要知道返回类型的大小，</description>
    </item>
    
    <item>
      <title>Rust by Example(chapter14)</title>
      <link>https://hadxu.github.io/post/2020-03-19-rust-by-example-chapter14/</link>
      <pubDate>Thu, 19 Mar 2020 09:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2020-03-19-rust-by-example-chapter14/</guid>
      <description>Generics(泛型) Generics是Rust中的重要内容，能够最大化地减少代码的重复。fn foo&amp;lt;T&amp;gt;(arg: T) { ... }来定义一个函数，传入的参数为T。 1 2 3 4 5 6 7 8 9 10 11 12 struct Val{val: f64,}implVal{pubfn value(&amp;amp;self)-&amp;gt; &amp;amp;f64 {&amp;amp;self.val}}fn main(){letx=Val{val: 3.};lety=x.value();} trait(接口) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 //定义接口 traitHasArea{fn area(&amp;amp;self)-&amp;gt; f64;}struct Rectangle{length: f64,height: f64 }// 实现接口 implHasAreaforRectangle{fn area(&amp;amp;self)-&amp;gt; f64</description>
    </item>
    
    <item>
      <title>Rust by Example(chapter9-13)</title>
      <link>https://hadxu.github.io/post/2020-03-18-rust-by-example-chapter9-13/</link>
      <pubDate>Wed, 18 Mar 2020 09:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2020-03-18-rust-by-example-chapter9-13/</guid>
      <description>模块 &amp;amp; crate &amp;amp; Cargo &amp;amp; Attributes 可见性 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 mod my_mod{// 不可见 fn private_function(){println!(&amp;#34;called `my_mod::private_function()`&amp;#34;);}// 可见 pubfn function(){println!(&amp;#34;called `my_mod::function()`&amp;#34;);}// 可以嵌套 pubmod nested{pubfn function(){println!(&amp;#34;called `my_mod::nested::function()`&amp;#34;);}}}mod my{// struct默认是私有的 pubstruct OpenBox&amp;lt;T&amp;gt;{pubcontents: T,}#[allow(dead_code)]pubstruct ClosedBox&amp;lt;T&amp;gt;{contents: T,}impl&amp;lt;T&amp;gt;ClosedBox&amp;lt;T&amp;gt;{pubfn new(contents: T)-&amp;gt; ClosedBox&amp;lt;T&amp;gt;{ClosedBox{contents: contents,}}}} 包可见性 Crates 在Rust中，crates是一个compilation unit，默认是编译成可执行文件，如</description>
    </item>
    
    <item>
      <title>Rust by Example(chapter8)</title>
      <link>https://hadxu.github.io/post/2020-03-17-rust-by-example-chapter8/</link>
      <pubDate>Tue, 17 Mar 2020 09:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2020-03-17-rust-by-example-chapter8/</guid>
      <description>函数 函数定义 1 2 3 fn fun(v:i32)-&amp;gt; i32{v+3} 定义类型以及返回类型，同时在Rust函数是一个表达式，也就是不需要return。 方法 1 2 3 4 5 6 7 struct Pair(Box&amp;lt;i32&amp;gt;,Box&amp;lt;i32&amp;gt;);implPair{fn destory(self){letPair(x,y)=self;println!(&amp;#34;Destroying Pair({}, {})&amp;#34;,x,y);}} 闭包(也称之为lambda表达式) 1 2 3 fn function(i: i32)-&amp;gt; i32 {i+1}letclosure_annotated=|i: i32|-&amp;gt; i32 {i+1};letone=||1; 下面看一下指针借用 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 fn main(){lethaystack=vec![1,2,3];letcontains=move|needle|haystack.contains(needle);println!(&amp;#34;{}&amp;#34;,contains(&amp;amp;1));println!(&amp;#34;{}&amp;#34;,contains(&amp;amp;4));println!(&amp;#34;There&amp;#39;re {} elements in vec&amp;#34;,haystack.len());// ^ Uncommenting above line will result in compile-time error // because borrow checker doesn&amp;#39;t</description>
    </item>
    
    <item>
      <title>Rust by Example(chapter7)</title>
      <link>https://hadxu.github.io/post/2020-03-16-rust-by-example-chapter7/</link>
      <pubDate>Mon, 16 Mar 2020 10:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2020-03-16-rust-by-example-chapter7/</guid>
      <description>Rust是一个现代的系统级编程语言，侧重于安全、速度和并发。 条件控制 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 fn main(){letn=5;ifn&amp;lt;0{print!(&amp;#34;{} is negative&amp;#34;,n);}elseifn&amp;gt;0{print!(&amp;#34;{} is positive&amp;#34;,n);}else{print!(&amp;#34;{} is zero&amp;#34;,n);}letbig_n=ifn&amp;lt;10&amp;amp;&amp;amp;n&amp;gt;-10{println!(&amp;#34;, and is a small number, increase ten-fold&amp;#34;);10*n}else{println!(&amp;#34;, and is a big number, halve the number&amp;#34;);n/2};println!(&amp;#34;{} -&amp;gt; {}&amp;#34;,n,big_n);} loop循环 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 fn main(){letmutcount=0u32;println!(&amp;#34;Let&amp;#39;s count until infinity!&amp;#34;);loop{count+=1;ifcount==3{println!(&amp;#34;three&amp;#34;);continue;}println!(&amp;#34;{}&amp;#34;,count);ifcount==5{println!(&amp;#34;OK, that&amp;#39;s enough&amp;#34;);break;}}}fn main(){letmutcounter=0;letresult=loop{counter+=1;ifcounter==10{breakcounter*2;}};assert_eq!(result,20);} for 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15</description>
    </item>
    
    <item>
      <title>Rust by Example(chapter6)</title>
      <link>https://hadxu.github.io/post/2020-03-15-rust-by-example-chapter6/</link>
      <pubDate>Sun, 15 Mar 2020 09:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2020-03-15-rust-by-example-chapter6/</guid>
      <description>Conversion Rust的核心就是traits，可以重载。 From and To 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 usestd::convert::From;#[derive(Debug)]struct Number{value: i32,}implFrom&amp;lt;i32&amp;gt;forNumber{fn from(item: i32)-&amp;gt; Self{Number{value: item}}}fn main(){letnum=Number::from(123);println!(&amp;#34;{:#?}&amp;#34;,num);letx=5;letnum: Number=x.into();println!(&amp;#34;{:#?}&amp;#34;,num);} 实现了From这个traits,就能够同时使用from以及into，用来从类型之间的转换。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 usestd::fmt;struct Circle{radius: i32 }implfmt::DisplayforCircle{fn fmt(&amp;amp;self,f: &amp;amp;mutfmt::Formatter)-&amp;gt; fmt::Result{write!(f,&amp;#34;Circle of radius {}&amp;#34;,self.radius)}}fn main(){letcircle=Circle{radius: 6};println!(&amp;#34;{}&amp;#34;,circle.to_string());} 从String转变 1 2 3</description>
    </item>
    
    <item>
      <title>The Politics of pandemics</title>
      <link>https://hadxu.github.io/post/2020-03-14-the-politics-of-pandemicsthe-Economist/</link>
      <pubDate>Sat, 14 Mar 2020 09:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2020-03-14-the-politics-of-pandemicsthe-Economist/</guid>
      <description>The Politics of pandemics All governments will struggle. Some will struggle more than others  </description>
    </item>
    
    <item>
      <title>Rust by Example(chapter4-5)</title>
      <link>https://hadxu.github.io/post/2020-03-13-rust-by-example-chapter4-5/</link>
      <pubDate>Fri, 13 Mar 2020 09:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2020-03-13-rust-by-example-chapter4-5/</guid>
      <description>变量绑定 简单的例子 1 2 3 4 //如果不使用会有警告 letnoisy_unused_variable=2u32;//前面添加了下划线就不会有警告 let_noisy_unused_variable=2u32; Mutability 如果申请一个变量可以变化的话，那么就需要 1 letmutmutable_binding=1; 变量作用域与变量名掩盖(Scope and Shadowing) 1 2 3 4 5 6 7 8 fn main(){leta=3;{leta=4;println!(&amp;#34;{}&amp;#34;,a);}println!(&amp;#34;{}&amp;#34;,a);} cast(强制转换) 1 2 3 4 5 6 7</description>
    </item>
    
    <item>
      <title>Rust by Example(chapter3)</title>
      <link>https://hadxu.github.io/post/2020-03-12-rust-by-example-chapter3/</link>
      <pubDate>Thu, 12 Mar 2020 10:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2020-03-12-rust-by-example-chapter3/</guid>
      <description>Custom Types Rust中有两种自定义类型 struct enum struct 在结构体中，有三种struct的类型，分别为 元祖数据结构 类C struct unit struts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 #[derive(Debug)]struct Person&amp;lt;&amp;#39;a&amp;gt;{// &amp;#39;a 表示生命周期,当Person生命结束了，那么name也结束了。 name: &amp;amp;&amp;#39;a str,age: u8,}struct Nil;struct Pair(i32,f32);struct Point{x: f32,y: f32,}// 取消禁用代</description>
    </item>
    
    <item>
      <title>Rust by Example(chapter1)</title>
      <link>https://hadxu.github.io/post/2020-03-10-rust-by-example-chapter1/</link>
      <pubDate>Wed, 11 Mar 2020 09:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2020-03-10-rust-by-example-chapter1/</guid>
      <description>Rust是一个现代的系统级编程语言，侧重于安全、速度和并发。 安装 1 curl--proto&amp;#39;=https&amp;#39;--tlsv1.2-sSfhttps://sh.rustup.rs | sh hello world 1 2 3 fn main(){println!(&amp;#34;Hello World!&amp;#34;);} 其中，println!是一个宏，功能是将字符串打印到终端。 编译方式如下 1 2 rustc hello.rs ./hello 或者使用 1 cargo run cargo是一个rust生态管理工具，我们在接下来的各种实例中都采用这种方式来运行我们的程序。 注释</description>
    </item>
    
    <item>
      <title>Rust by Example(chapter2)</title>
      <link>https://hadxu.github.io/post/2020-03-11-rust-by-example-chapter2/</link>
      <pubDate>Wed, 11 Mar 2020 09:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2020-03-11-rust-by-example-chapter2/</guid>
      <description>Primitives(基本数据类型) Rust提供了几种数据类型 整数类型: i8, i16, i32, i64, i128 和isize(指针) 无符号整数类型: u8, u16, u32, u64, u128 和usize(指针) 浮点: f32, f64 char类型(4个比特) bool类型 元祖类型() 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 fn main(){// Variables can be type annotated. letlogical: bool =true;leta_float: f64 =1.0;//</description>
    </item>
    
    <item>
      <title>命令用的好,监狱进的早</title>
      <link>https://hadxu.github.io/post/2020-03-10-wipe-hard-driver/</link>
      <pubDate>Tue, 10 Mar 2020 10:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2020-03-10-wipe-hard-driver/</guid>
      <description>命令用的好,监狱进的早 2月23日19点，微盟服务器出现大规模宕机，大面积服务集群无法响应，生产环境及数据遭受严重破坏，致使无法向客户提供服务，涉及百万商家，2月24日，进一步查明是公司研发中心运维部核心运维人员贺某“通过个人VPN登入公司内网跳板机破坏所为，犯罪嫌疑人已经被宝山区</description>
    </item>
    
    <item>
      <title>The right medicine for the world economy</title>
      <link>https://hadxu.github.io/post/2020-03-10-the-right-medicine-for-the-world-economythe-Economist/</link>
      <pubDate>Mon, 09 Mar 2020 22:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2020-03-10-the-right-medicine-for-the-world-economythe-Economist/</guid>
      <description>The right medicine for the world economy Coping with the pandemic involves all of government, not just the health system IT IS NOT a fair fight, but it is a fight that many countries will face all the same. Left to itself, the covid-19 pandemic doubles every five to six days. When you get your next issue of The Economist the outbreak could in theory have infected twice as many people as today.Governments can slow that ferocious(凶猛的) pace, but bureaucratic time is not the same as virus time.( 这句话有点难以理解, 官方的数据和病毒真实的数据不一样) And at the moment governments across the world are being left f</description>
    </item>
    
    <item>
      <title>从零实现深度学习框架(day4)</title>
      <link>https://hadxu.github.io/post/2020-03-09-thunderday4/</link>
      <pubDate>Sun, 08 Mar 2020 22:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2020-03-09-thunderday4/</guid>
      <description>第四天 实现自动求导机制 前3天，我们已经实现了基本的数据结构无缝切换与CPU与GPU，现在实现自动求导机制。 第一步 建立计算节点。 1 2 3 4 5 6 class Node(object): def __init__(self): self.inputs = [] self.op = None self.const_attr = None self.name = &amp;#34;&amp;#34; 每个节点有输入 操作符 常量值 以及 名称 定义操作运算符 1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Op(object): def __call__(self): new_node = Node() new_node.op = self</description>
    </item>
    
    <item>
      <title>从零实现深度学习框架(day3)</title>
      <link>https://hadxu.github.io/post/2020-03-08-thunderday3/</link>
      <pubDate>Sun, 08 Mar 2020 21:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2020-03-08-thunderday3/</guid>
      <description>到目前为止，已经实现了GPU与CPU无缝切换的数据结构，但是我们需要在Python语言中使用，今天我们来实现Python调用。 第三天 实现Python调用动态链接库 今天的目标是实现Python来调用已经编译好的动态链接库来进行GPU与CPU的无缝切换。 首先，将编译好的libc_</description>
    </item>
    
    <item>
      <title>从零实现深度学习框架(day2)</title>
      <link>https://hadxu.github.io/post/2020-03-07-thunderday2/</link>
      <pubDate>Sat, 07 Mar 2020 21:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2020-03-07-thunderday2/</guid>
      <description>前一天我们实现了CPU数据结构的操作，今天我们实现GPU的操作。 CUDA是NVIDIA提出的并行计算框架，结合了CPU与GPU的优点，主要用来处理密集型并行计算。GPU用来提高计算密集型应用程序中并行程序段的执行速度。CUDA是非常重要的计算加速平台。 需要注意的是，网上并没有</description>
    </item>
    
    <item>
      <title>从零实现深度学习框架(day1)</title>
      <link>https://hadxu.github.io/post/2020-03-06-thunderday1/</link>
      <pubDate>Fri, 06 Mar 2020 21:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2020-03-06-thunderday1/</guid>
      <description>第一天(构建数据结构，无缝切换GPU与CPU) 深度学习框架层出不穷，作为学生，需要学习的东西特别多，常见的深度学习框架有Tensorflow,Caffe,Theano,Pytorch,Mxnet,Keras等，这些深度学习被广泛应用于计算机视觉、语音识别、自然语言处理等领域，并</description>
    </item>
    
    <item>
      <title>泰国游玩</title>
      <link>https://hadxu.github.io/post/2020-03-01-the-tour-of-thailand/</link>
      <pubDate>Tue, 03 Mar 2020 21:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2020-03-01-the-tour-of-thailand/</guid>
      <description>泰国游玩 人生中第一次去国外玩，选择泰国不仅仅是近，更重要的是价格便宜，玩了很多很多项目。 路径规划 第一次坐飞机 在清迈 在水上市场 在芭提雅 在芭提雅看人妖</description>
    </item>
    
    <item>
      <title>FQ(科学上网)的正确打开方式</title>
      <link>https://hadxu.github.io/post/2020-03-01-the-best-way-to-fq/</link>
      <pubDate>Mon, 02 Mar 2020 21:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2020-03-01-the-best-way-to-fq/</guid>
      <description>科学上网的正确打开方式 介绍 作为一个计算机从业者，无法获取最先进的、最前沿的信息是令人痛苦的，lay从读本科以来，一直寻找最好的方式去接触最外围的信息。中间经历了各种各样的苦难，皇天不负有心人，让我找到了相对比较靠谱的方案。 1. 自己选择服务器 具体选择哪一个服务器，只要是国外的都可以。</description>
    </item>
    
    <item>
      <title>博客迁移</title>
      <link>https://hadxu.github.io/post/2020-03-01-blog-change/</link>
      <pubDate>Sun, 01 Mar 2020 21:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2020-03-01-blog-change/</guid>
      <description>博客迁移 2020-03-28更新 使用hogo发现了新大陆，可以在markdown中嵌入各种我们需要的资源。比如官方的youtube，同时我们还可以自定义自己的shortcodes。比如我每一周都看经济学人，想将音频放上来，找了很多的资料，终于完成这个。非常感谢这个官方youtub</description>
    </item>
    
  </channel>
</rss>
