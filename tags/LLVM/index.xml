<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LLVM on lay&#39;s 博客</title>
    <link>https://hadxu.github.io/tags/LLVM/</link>
    <description>Recent content in LLVM on lay&#39;s 博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 11 Nov 2022 11:00:00 +0800</lastBuildDate><atom:link href="https://hadxu.github.io/tags/LLVM/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>LLVM中常见的数据结构</title>
      <link>https://hadxu.github.io/post/2022-11-12-llvm-structure/</link>
      <pubDate>Fri, 11 Nov 2022 11:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2022-11-12-llvm-structure/</guid>
      <description>LLVM中常见的数据结构 在介绍数据结构之前，llvm官方首先让我们熟悉isa操作。这是类似于javaisinstance操作，这是在面向对象中用来看对象的类型。如官方的例子 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 class Shape { public: enum</description>
    </item>
    
    <item>
      <title>LLVM</title>
      <link>https://hadxu.github.io/post/2022-10-30-llvm-tutorail/</link>
      <pubDate>Sun, 30 Oct 2022 11:00:00 +0800</pubDate>
      
      <guid>https://hadxu.github.io/post/2022-10-30-llvm-tutorail/</guid>
      <description>编译器之LLVM 计算机发展到今天，有两个非常著名的编译器是我们经常用到的-GCC和Clang。GCC是古老的编译器，来自于贝尔实验室，可以说是上个世纪的产物，但是并没有因为古老而放弃使用，GCC仍然在更新，目前已经更新到gcc-12(截止2022-10-30）。而Clang是新出</description>
    </item>
    
  </channel>
</rss>
